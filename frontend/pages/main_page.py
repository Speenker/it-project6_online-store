import streamlit as st
from services.kafka_logger import log_user_action
from services.http_client import make_request

API_URL = "http://fastapi:8000"

def show_main_page(email=None):
    st.title("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
    if "search_query" not in st.session_state:
        st.session_state.search_query = ""
    if "search_results" not in st.session_state:
        st.session_state.search_results = []
        
    if 'viewed_products' not in st.session_state:
        st.session_state.viewed_products = set()

    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é):", st.session_state.search_query)
    use_search = st.button("–ò—Å–∫–∞—Ç—å")

    products = []
    if search_query and use_search:
        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Elasticsearch
        try:
            resp = make_request(f"{API_URL}/search", params={"q": search_query})
            resp.raise_for_status()
            products = resp.json()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            st.session_state.search_query = search_query
            st.session_state.search_results = products
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return
    elif st.session_state.search_results:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        products = st.session_state.search_results
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        try:
            resp = make_request(f"{API_URL}/products")
            resp.raise_for_status()
            products = resp.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return

    if not products:
        st.warning("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    product_names = [product["name"] for product in products]
    selected_product_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", product_names)
    selected_product = next((p for p in products if p["name"] == selected_product_name), None)
    if not selected_product:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.")
        return

    product_id = selected_product["product_id"]

    # Log product view only if it's the first time viewing this product
    if product_id not in st.session_state.viewed_products:
        log_user_action('product_view', email,
                    product_id=product_id,
                    product_name=selected_product['name'])
        # Add product to viewed products set
        st.session_state.viewed_products.add(product_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞ (–≤—Å–µ–≥–¥–∞)
    try:
        details_resp = make_request(f"{API_URL}/products/{product_id}")
        details_resp.raise_for_status()
        product_details = details_resp.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞: {e}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    try:
        reviews_resp = make_request(f"{API_URL}/products/{product_id}/reviews")
        reviews_resp.raise_for_status()
        product_reviews = reviews_resp.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        product_reviews = []

    st.write(f"### {selected_product['name']}")
    st.write(f"**–¶–µ–Ω–∞:** {selected_product['price']} $")
    st.write(f"**–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ:** {product_details['stock']} —à—Ç.")

    if "description" not in st.session_state:
        st.session_state["description"] = False
    if "reviews" not in st.session_state:
        st.session_state["reviews"] = False

    if st.button("–û–ø–∏—Å–∞–Ω–∏–µ", key="btn_description"):
        st.session_state["description"] = not st.session_state["description"]
    if st.session_state["description"]:
        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {product_details['description']}")
        st.write(f"**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:** {product_details.get('manufacturer_name', '-')} ({product_details.get('manufacturer_id', '-')})")

    if st.button("–û—Ç–∑—ã–≤—ã", key="btn_reviews"):
        st.session_state["reviews"] = not st.session_state["reviews"]
    if st.session_state["reviews"]:
        if product_reviews:
            st.write("### –û—Ç–∑—ã–≤—ã:")
            for review in product_reviews:
                st.write(f"- {review['review_text']} | {review['rating']}/5 üåü")
        else:
            st.write("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.") 